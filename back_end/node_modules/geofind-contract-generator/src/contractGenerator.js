const fs = require('fs');
const path = require('path');
const { PDFDocument, rgb, StandardFonts } = require('pdf-lib');

class ContractGenerator {
    constructor() {
        this.outputDir = path.join(process.cwd(), 'contracts');
        if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir, { recursive: true });
        }
    }

    // Generar número de contrato único
    generateContractNumber() {
        const timestamp = Date.now().toString(36).toUpperCase();
        const random = Math.random().toString(36).substring(2, 6).toUpperCase();
        return `GF-${timestamp}-${random}`;
    }

    async generateRentalContract(clientData, propertyData) {
        // Generar número de contrato automáticamente
        const contractNumber = this.generateContractNumber();
        
        // Crear PDF
        const pdfDoc = await PDFDocument.create();
        let page = pdfDoc.addPage([595.28, 841.89]); 

        const verdeOscuro = rgb(0 / 255, 100 / 255, 0 / 255);
        const verdeMedio = rgb(0 / 255, 128 / 255, 0 / 255);
        const verdeClaro = rgb(144 / 255, 238 / 255, 144 / 255);
        const verdeMuyClaro = rgb(240 / 255, 255 / 255, 240 / 255);
        const grisTexto = rgb(64 / 255, 64 / 255, 64 / 255);
        const blanco = rgb(1, 1, 1);

        const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
        const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
        const fontItalic = await pdfDoc.embedFont(StandardFonts.HelveticaOblique);

        let y = 820; 

        // divide los textos en lineas
        const splitTextIntoLines = (text, maxWidth, fontSize, fontType) => {
            const lines = [];
            const words = text.split(' ');
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                const word = words[i];
                const width = fontType.widthOfTextAtSize(currentLine + ' ' + word, fontSize);
                if (width < maxWidth) {
                    currentLine += ' ' + word;
                } else {
                    lines.push(currentLine);
                    currentLine = word;
                }
            }
            lines.push(currentLine);
            return lines;
        };

        // fondo
        const drawBackground = (x, y, width, height, color) => {
            page.drawRectangle({
                x,
                y: y - height,
                width,
                height,
                color,
            });
        };

        // Acomoda los textos en caso de ser muy largos
        const drawTextWithBackground = (text, x, y, size, fontType, color, bgColor, width = 495, align = 'left', lineSpacing = 6) => {
            const lines = splitTextIntoLines(text, width, size, fontType);
            const lineHeight = size + lineSpacing;
            const totalHeight = lineHeight * lines.length;

            // fondo
            if (bgColor) {
                drawBackground(x, y, width, totalHeight, bgColor);
            }

            lines.forEach((line, index) => {
                const yPos = y - (size + (lineHeight * index));
                page.drawText(line, {
                    x: align === 'center' ? x + (width - fontType.widthOfTextAtSize(line, size)) / 2 : x,
                    y: yPos,
                    size,
                    font: fontType,
                    color,
                });
            });

            return totalHeight;
        };

        // Encabezado inicial
        const headerHeight = drawTextWithBackground(
            'CONTRATO DE ARRENDAMIENTO',
            50, y, 18, fontBold, blanco, verdeOscuro, 495, 'center'
        );
        y -= headerHeight + 15;

        // Info contrato
        const infoHeaderHeight = drawTextWithBackground(
            'INFORMACIÓN DEL CONTRATO',
            50, y, 11, fontBold, grisTexto, verdeMuyClaro, 495
        );
        y -= infoHeaderHeight + 8;

        const infoLine1 = `Número de Contrato: ${contractNumber}`;
        const infoLine2 = `Fecha: ${new Date().toLocaleDateString('es-MX')}`;
        
        drawBackground(50, y, 495, 8, verdeMuyClaro);
        
        page.drawText(infoLine1, {
            x: 50,
            y: y - 6,
            size: 11,
            font,
            color: grisTexto,
        });

        page.drawText(infoLine2, {
            x: 300,
            y: y - 6,
            size: 11,
            font,
            color: grisTexto,
        });
        y -= 20;

        // Datos del arrendatario
        const arrendatarioHeaderHeight = drawTextWithBackground(
            'DATOS DEL ARRENDATARIO',
            50, y, 13, fontBold, grisTexto, verdeMuyClaro, 495
        );
        y -= arrendatarioHeaderHeight + 12;

        const datosPersonales = [
            `Nombre Completo: ${clientData.nombre || 'N/A'}`,
            `Edad: ${clientData.edad || 'N/A'} años`,
            `Email: ${clientData.gmail || 'N/A'}`,
            `Teléfono: ${clientData.numero_telefonico || 'N/A'}`,
            `Dirección: ${clientData.direccion || 'N/A'}`,
            `CURP: ${clientData.curp || 'N/A'}`
        ];

        datosPersonales.forEach(dato => {
            drawBackground(50, y, 495, 10, verdeMuyClaro);
            page.drawText(dato, {
                x: 50,
                y: y - 7,
                size: 11,
                font,
                color: grisTexto,
            });
            y -= 14;
        });
        y -= 10; 

        // Datos de la propiedad
        const propiedadHeaderHeight = drawTextWithBackground(
            'DATOS DE LA PROPIEDAD',
            50, y, 13, fontBold, grisTexto, verdeMuyClaro, 495
        );
        y -= propiedadHeaderHeight + 12;

        const datosPropiedad = [
            `Dirección: ${propertyData.property_address || 'N/A'}`,
            `Tipo de Inmueble: ${propertyData.property_type || 'Departamento'}`,
            `Período: ${propertyData.rental_period || '6 meses'}`,
            `Renta Mensual: $${propertyData.monthly_rent || '0'} MXN`,
            `Depósito: $${propertyData.deposit_amount || '0'} MXN`
        ];

        datosPropiedad.forEach(dato => {
            drawBackground(50, y, 495, 10, verdeMuyClaro);
            page.drawText(dato, {
                x: 50,
                y: y - 7, 
                size: 11,
                font,
                color: grisTexto,
            });
            y -= 14; 
        });
        y -= 12;

        if (propertyData.bankDetails && Object.keys(propertyData.bankDetails).length > 0) {
            const bankHeaderHeight = drawTextWithBackground(
                'INFORMACIÓN BANCARIA PARA PAGOS',
                50, y, 13, fontBold, grisTexto, verdeMuyClaro, 495
            );
            y -= bankHeaderHeight + 8;

            const bankInfo = propertyData.bankDetails;
            const datosBancarios = [
                `Banco: ${bankInfo.bank_name || 'N/A'}`,
                `Número de Cuenta: ${bankInfo.account_number || 'N/A'}`,
                `Titular: ${bankInfo.account_holder || 'N/A'}`,
                ...(bankInfo.clabe ? [`CLABE Interbancaria: ${bankInfo.clabe}`] : []),
                ...(bankInfo.rfc ? [`RFC: ${bankInfo.rfc}`] : [])
            ];

            datosBancarios.forEach(dato => {
                drawBackground(50, y, 495, 10, verdeMuyClaro);
                page.drawText(dato, {
                    x: 50,
                    y: y - 7,
                    size: 11,
                    font,
                    color: grisTexto,
                });
                y -= 14;
            });
            y -= 10;
        }

        // Terminos y condiciones
        const terminosHeaderHeight = drawTextWithBackground(
            'TÉRMINOS Y CONDICIONES',
            50, y, 13, fontBold, blanco, verdeMedio, 495, 'center'
        );
        y -= terminosHeaderHeight + 15;

        // Clausulas por defecto, si no se especifican
        let clausulasFinales = propertyData.clausulas && propertyData.clausulas.length > 0 
            ? propertyData.clausulas 
            : [
                "1. DURACIÓN: El presente contrato tendrá una vigencia de 6 meses renovables.",
                "2. RENTA: El pago mensual deberá realizarse antes del día 5 de cada mes mediante transferencia bancaria a la cuenta indicada.",
                "3. DEPÓSITO: El depósito será de el costo de una renta y será devuelto al término, previa verificación del inmueble.",
                "4. MANTENIMIENTO: El arrendatario mantendrá la propiedad en óptimas condiciones.",
                "5. SERVICIOS: Incluye servicios básicos."
            ];

        clausulasFinales.forEach((clausula, index) => {
            if (y < 150) {
                
                const newPage = pdfDoc.addPage([595.28, 841.89]);
                page = newPage;
                y = 820;
            }

            const bgColor = index % 2 === 0 ? verdeMuyClaro : blanco;
            const textHeight = drawTextWithBackground(
                clausula,
                50, y, 10, font, grisTexto, bgColor, 495, 'left', 4
            );
            y -= textHeight + 2;
        });

        // Firmas
        if (y < 200) {            
            const newPage = pdfDoc.addPage([595.28, 841.89]);
            page = newPage;
            y = 820;
        }

        y -= 20; 

        // Encabezado de firmas
        const firmasHeaderHeight = drawTextWithBackground(
            'FIRMAS',
            50, y, 11, fontBold, grisTexto, verdeClaro, 495, 'center'
        );
        y -= firmasHeaderHeight + 30; 

        page.drawText('ARRENDADOR', {
            x: 50,
            y: y,
            size: 11,
            font: fontBold,
            color: grisTexto,
        });

        page.drawText('ARRENDATARIO', {
            x: 300,
            y: y,
            size: 11,
            font: fontBold,
            color: grisTexto,
        });
        
        y -= 60;

        page.drawText('_________________________', {
            x: 50,
            y: y,
            size: 10,
            font,
            color: grisTexto,
        });

        page.drawText('_________________________', {
            x: 300,
            y: y,
            size: 10,
            font,
            color: grisTexto,
        });
        y -= 20; 

        page.drawText(propertyData.arrendador_nombre || 'Propietario/Representante', {
            x: 50,
            y: y,
            size: 10,
            font,
            color: grisTexto,
        });

        page.drawText(clientData.nombre || 'N/A', {
            x: 300,
            y: y,
            size: 10,
            font,
            color: grisTexto,
        });
        y -= 30; 

        // Pie de página
        drawTextWithBackground(
            'Documento generado automáticamente - Sistema de GeoFind',
            50, y, 8, fontItalic, blanco, verdeOscuro, 495, 'center'
        );

        const filename = `contrato_${contractNumber}.pdf`;
        const filepath = path.join(this.outputDir, filename);
        const pdfBytes = await pdfDoc.save();
        fs.writeFileSync(filepath, pdfBytes);

        return filepath;
    }
}

module.exports = ContractGenerator;